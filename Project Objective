Objective:


Design and implement a high availability system using a hot and standby configuration within an existing Kubernetes (k8s) cluster. The assignment will require you to use Ansible for automation, CI/CD pipelines, and demonstrate strong networking, security. This platform will be used by developers to deploy their services.
Please note partial solutions are acceptable. It is not necessary to submit a complete solution that implements every requirement.


Assumption:


You can assume to have 2 k8s cluster already deplopyed, and each has an Nginx controller configured. Create a platform that developers can easily deploy their services. For simplicity,
assume the services only require TCP connectivity using Rest API.
For simplicity, assume the services only require TCP connectivity using Rest API. Use the backend-service example provided in this assignment.

Assignment Tasks:

System Design and Architecture:

Design a high availability system with hot and standby configurations. Create a detailed architecture diagram that includes:

Kubernetes clusters for both hot and standby instances.
Load balancers to manage traffic between hot and standby systems.
Network configurations and security measures.

Automation with Ansible:

Write Ansible playbooks to automate the configuration of the K8s cluster.
Include tasks for installing necessary software, configuring network settings, and applying security patches.

CI/CD Pipeline:

Set up a CI/CD pipeline using a tool like Jenkins, GitLab CI, or GitHub Actions. The pipeline should automate the build, test, and deployment process for the applications 
running in the Kubernetes clusters. Implement automated testing to ensure the reliability of the deployments.



Application Deployment:

Containerize an application using Docker and deploy it to the Kubernetes clusters. Create Dockerfiles and Kubernetes manifests (Deployments, Services, ConfigMaps, etc.). Ensure that the application is deployed to both hot and standby clusters with proper load balancing.



Failover Mechanism:

Implement a failover mechanism that automatically switches traffic to the standby system in case the hot system fails.
Feel free to use Kubernetes features or any external tools you see fitted to this scenario.
Configure the load balancer to detect failures and redirect traffic accordingly.

Networking and Security:


Configure network settings to ensure secure communication between components. Implement firewall rules, or any network segmentation as needed. Apply security best practices to protect the system from threats.





Monitoring and Logging:


Set up monitoring and logging for the entire system. Use tools like Prometheus, Grafana, or the ELK Stack. Ensure that the system health and performance can be tracked in real-time.





What are we looking for?


Assumptions you make given limited requirements
Technology and design choices
How would you bring the application to production to support thousands of users?
Identify areas of your strengths
This is not a pass or fail test, this will serve as a common ground that we can deep dive together into specific issues

Deliverables:


You can submit your solution to your private GitHub repo, or package all your files as a Zip, and reply to the original email as attachment. It can include:



Architecture diagram and design document. - H Done

Ansible playbooks for automation. - H Done

CI/CD pipeline configuration files. - D
Sonarqube - AWS


Dockerfiles and Kubernetes manifests for deploying the back-end service. - D Done

Documentation of the failover mechanism. - H Done
Failover Lambda

Network and security configuration details. - H Tomorrow

Monitoring and logging setup. - Done, Used Helm



Ansible - Installation of Sonar Qube, Jenkins and all that through ansible


ssh-keygen -t rsa
